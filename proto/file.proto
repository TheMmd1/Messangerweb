syntax = "proto3";

package file;

option go_package = "./";

// The FileStorageService service definition.
service FileStorageService {
    // Uploads chunks of a file and returns control signals.
    rpc upload(stream UploadChunk) returns (stream UploadControlSignal);

    // Downloads chunks of a file and receives control signals.
    rpc download(stream DownloadControlSignal) returns (stream DownloadChunk);

    // Admin-only operation to create a ticket for file upload or download.
    rpc create_ticket(CreateTicketRequest) returns (CreateTicketResponse);

    // RPC to get the names and sizes of all stored files.
    rpc GetAllStoredFilesNames(Empty) returns (Files);

    // RPC to remove a file with a specific file ID.
    rpc RemoveFile(RemoveFileRequest) returns (Empty);
}

// AuthInfo message containing an authentication ticket.
message AuthInfo {
    string ticket = 1;
}

// Chunk message representing a chunk of binary data.
message Chunk {
    int32 chunk_id = 1;
    bytes content = 2;
}

// SetOffset message for setting the file offset.
message SetOffset {
    int32 offset = 1;
}

// UploadChunk message containing various types of content.
message UploadChunk {
    oneof content {
        AuthInfo auth_info = 1;
        SetOffset set_offset = 2;
        Chunk chunk = 3;
    }
}

// UploadInfo message containing information about the upload progress.
message UploadInfo {
    int32 last_chunk_id = 2;
    int32 last_chunk_size = 3;
    int32 total_received = 4;
}

// UploadControlSignal message for controlling the upload process.
message UploadControlSignal {
    UploadAction request = 1;
    optional UploadInfo upload_info = 2;
}

// Enum defining different upload actions.
enum UploadAction {
    authenticate = 0; // Action to authenticate the upload.
    next_chunk = 3;  // Action to request the next chunk.
}

// DownloadControlSignal message containing different request types.
message DownloadControlSignal {
    oneof request {
        DownloadStartRequest start_request = 1;
        DownloadChunkRequest chunk_request = 2;
    }
}

// DownloadStartRequest message for initiating a download.
message DownloadStartRequest {
    AuthInfo auth_info = 1;
    int32 offset = 2;
    int32 chunk_size = 3;
    int32 chunk_limit = 4;      // Leave 0 to read to the end of the file.
}

// DownloadChunkRequest message for requesting download chunks.
message DownloadChunkRequest {
    int32 last_chunk_id = 1;
    int32 last_chunk_size = 2;
    int32 total_received = 3;
}

// DownloadInfo message containing information about the download.
message DownloadInfo {
    int32 chunk_size = 1;
    string file_id = 2;
    int32 file_size = 3;
}

// DownloadChunk message containing different types of content.
message DownloadChunk {
    oneof content {
        DownloadInfo download_info = 1;
        Chunk chunk = 2;
    }
}

// CreateTicketRequest message for creating upload or download tickets.
message CreateTicketRequest {
    StreamDirection direction = 1;
    int32 size = 2;
    optional string file_id = 3;
}

// Enum defining the direction of the data stream.
enum StreamDirection {
    download = 0; // Data stream is for downloading.
    upload = 1;   // Data stream is for uploading.
}

// Empty message used as a response when no additional data is needed.
message Empty {}

// CreateTicketResponse message containing the generated ticket ID.
message CreateTicketResponse {
    string ticket_id = 1;
    string file_id = 2;
}

// File message representing a file with its name and size.
message File {
    string name = 1;
    int64 size = 2;
}

// Files message containing a repeated list of File messages.
message Files {
    repeated File files = 1;
}

// RemoveFileRequest message containing the file ID to remove.
message RemoveFileRequest {
    string file_id = 1;
}
